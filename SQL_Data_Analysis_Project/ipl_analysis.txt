2. Create table deliveries.
create table deliveries(
	id int,
	inning int,
	over int,
	ball int,
	batsman varchar(255),
	non_striker varchar(255),
	bowler varchar(255),
	batsman_runs int,
	extra_runs int,
	total_runs int,
	is_wicket int,
	dismissal_kind varchar(225),
	player_dismissed varchar(225),
	fielder varchar(225),
	extras_type varchar(225),
	batting_team varchar(225),
	bowling_team varchar(225)
);

1. Create table matches.
create table matches(
	id int primary key,
	city varchar(225),
	date date,
	player_of_match varchar(225),
	venue varchar(225),
	neutral_venue int,
	team1 varchar(225),
	team2 varchar(225),
	toss_winner varchar(225),
	toss_decision varchar(225),
	winner varchar(225),
	result varchar(225),
	result_margin int,
	eliminator varchar(225),
	method varchar(225),
	umpire1 varchar(225),
	umpire2 varchar(225)
);

select * from deliveries;
select * from matches;

3,4> copy data from Csv file.
copy deliveries from 'C:\Program Files\PostgreSQL\15\data\data_copy\IPL_Ball.csv' delimiter ',' csv header;
copy matches from 'C:\Program Files\PostgreSQL\15\data\data_copy\IPL_matches.csv' delimiter ',' csv header;

5> Select the top 20 rows of the deliveries table after ordering them by id, inning, over, ball in ascending order.
ams>
select  id, inning, over, ball from deliveries order by id limit 20;

6> Select the top 20 rows of the matches table.
ans>
select * from matches limit 20;

7> Fetch data of all the matches played on 2nd May 2013 from the matches table..
ans>
select * from matches where date ='2013-05-02';

8> Fetch data of all the matches where the result mode is ‘runs’ and margin of victory is more than 100 runs.
ans>
select * from matches where result='runs' and result_margin>100;

9> Fetch data of all the matches where the final scores of both teams tied and order it in descending order of the date.
ans>
select * from matches where result='tie' order by date desc;

10> Get the count of cities that have hosted an IPL match.
ans>
select count(distinct city) from matches ;

11>
Create table deliveries_v02 with all the columns of the table ‘deliveries’ and an additional column ball_result containing
 values boundary, dot or other depending on the total_run (boundary for >= 4, dot for 0 and other for any other number).

ans>
create table deliveries_v02 as select *, case when 
total_runs >= 4 then 'boundary' when total_runs = 0 then 'dot' else 'other' 
end as ball_result from deliveries;

12>
Write a query to fetch the total number of boundaries and dot balls from the deliveries_v02 table.
ans>
select ball_result, count(*) as total from deliveries_v02
group by ball_result order by total desc;

13>
Write a query to fetch the total number of boundaries scored by each team from the deliveries_v02
table and order it in descending order of the number of boundaries scored.
ans>
select batting_team , count(ball_result) as total_boundaries from deliveries_v02
where ball_result = 'boundary'
group by batting_team
order by total_boundaries desc;

14. Write a query to fetch the total number of dot balls bowled by each team
and order it in descending order of the total number of dot balls bowled.
ans>
select bowling_team , count(ball_result) as total_dot_bowled from deliveries_v02 where ball_result = 'dot'
group by bowling_team order by total_dot_bowled desc;

15.Write a query to fetch the total number of dismissals by dismissal kinds where dismissal kind is not NA.
ans>
select dismissal_kind , count(dismissal_kind) as total_dismiss from deliveries 
where dismissal_kind !='NA'
group by dismissal_kind  order by total_dismiss desc;

16. Write a query to get the top 5 bowlers who conceded maximum extra runs from the deliveries table.
ans>
select bowler , sum(extra_runs) as total_extra_run from deliveries
group by bowler order by total_extra_run desc limit 5;

17.Write a query to create a table named deliveries_v03 with all the columns of deliveries_v02
table and two additional column (named venue and match_date) of venue and date from table matches.
ans>
create table deliveries_v03 as select a.* , b.venue , b.date as match_date
from deliveries_v02 as a left join matches as b 
on a.id=b.id;

18 Write a query to fetch the total runs scored for each venue and order it in the descending order of total runs scored.
ans>
select venue , sum (total_runs) as total_runs from deliveries_v03
group by venue order by total_runs desc;

19.Write a query to fetch the year-wise total runs scored at Eden Gardens 
and order it in the descending order of total runs scored.
ans>
select extract(year from match_date) as IPL_year , sum (total_runs) as runs 
from deliveries_v03 where venue='Eden Gardens' group by IPL_year order by runs desc;

20.Get unique team1 names from the matches table, you will notice that there are two entries 
for Rising Pune Supergiant one with Rising Pune Supergiant and another one with Rising Pune Supergiants.  
Your task is to create a matches_corrected table with two additional columns team1_corr and 
team2_corr containing team names with replacing Rising Pune Supergiants with Rising Pune Supergiant. 
Now analyse these newly created columns.
ans>
create table matches_corrected as select *, replace(team1, 'Rising Pune Supergiants', 'Rising Pune Supergiant') 
as team1_corr , 
replace(team2, 'Rising Pune Supergiants', 'Rising Pune Supergiant') as team2_corr from matches;

21. Create a new table deliveries_v04 with the first column as ball_id containing information of match_id, inning, over 
and ball separated by ‘-’ (For ex. 335982-1-0-1 match_id-inning-over-ball) and rest of the columns same as deliveries_v03).
ans>
create table deliveries_v04 as  select id ||'-'|| inning ||'-'|| over ||'-'|| ball as ball_id , * from deliveries_v03;

22. Compare the total count of rows and total count of distinct ball_id in deliveries_v04;
ans>
select count(*) from deliveries_v04;
select count(distinct ball_id) from deliveries_v04;

23. Create table deliveries_v05 with all columns of deliveries_v04 and an additional column for row number partition over ball_id.
(HINT : Syntax to add along with other columns,  row_number() over (partition by ball_id) as r_num)
ans>
create table deliveries_v05 as select *, row_number() over (partition by ball_id) as r_num from deliveries_v04;

24. Use the r_num created in deliveries_v05 to identify instances where ball_id is repeating. (HINT : select * from deliveries_v05 WHERE r_num=2;)
ans>
select * from deliveries_v05 where r_num = 2;

25. Use subqueries to fetch data of all the ball_id which are repeating. 
(HINT: SELECT * FROM deliveries_v05 WHERE ball_id in (select BALL_ID from deliveries_v05 WHERE r_num=2);
ans>
SELECT * FROM deliveries_v05 WHERE ball_id in (select BALL_ID from deliveries_v05 WHERE r_num=2);